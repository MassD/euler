(**

Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

*)

let comp (a,b) (c,d) = 
  let a' = float_of_int a 
  and b' = float_of_int b
  and c' = float_of_int c
  and d' = float_of_int d 
  in
  (*compare (b'*.(log a')) (d'*.(log c'))*)
  let l = b'*.(log a') and r = d'*.(log c') and epsilon = 1.0e-10 in
  if (abs_float (l-.r)) < epsilon then 0
  else compare l r

let rm_dup l =
  let rec rm acc = function
    | [] -> acc
    | hd::[] -> hd::acc
    | hd1::hd2::tl -> 
      if comp hd1 hd2 = 0 then rm acc (hd2::tl)
      else rm (hd1::acc) (hd2::tl)
  in 
  rm [] l

let distinct_powers lo hi =
  let rec powers acc i j =
    if j = hi+1 then powers acc (i+1) 2
    else if i = hi+1 then acc
    else powers ((i,j)::acc) i (j+1)
  in 
  powers [] 2 2 |> List.sort comp |> rm_dup |> List.length
